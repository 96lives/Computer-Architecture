#----------------------------------------------------------------------
# 
#  4190.308 Computer Architecture (Fall 2018)
#
#  Project #5: Optimizing Performance on a Pipelined Y86-64 Processor
#
#  December 4, 2018
#
#  Jin-Soo Kim (jinsoo.kim@snu.ac.kr)
#  Systems Software & Architecture Laboratory
#  Dept. of Computer Science and Engineering
#  Seoul National University
#  http://csl.snu.ac.kr
#
#----------------------------------------------------------------------

bmp_mosaic:
	# imgptr is in %rdi
	# width  is in %rsi
	# height is in %rdx
	# size 	 is in %rcx
	#-----------------------------------------------------------------
    # %rax=?, %rbx=?, %rcx=size, %rdx=height
    # %rsi=width, %rdi=imgPtr, $rbp=?,%r8=?,
    # %r9=?, %r10=?, %r11=?, %r12=?
    # %r13=?, %r14=?
    # 1. calculate bitwidth
    irmovq $3, %rax
    rrmovq %rsi, %rbx
    rrmovq %rsi, %rbp
    andq %rax, %rbx
    mulq %rax, %rbp
    addq %rbp, %rbx
    # %rax=3, %rbx=bitWidth, %rcx=size, %rdx=height
    # %rsi=width, %rdi=imgPtr, $rbp=?, %r8=?,
    # %r9=?, %r10=?, %r11=?, %r12=?
    # %r13=?, %r14=?
    
    # 2. Calculate lastRow
    rrmovq %rdx, %rbp
    mulq %rbx, %rbp
    subq %rbx, %rbp
    addq %rbp, %rdi
    # %rax=3, %rbx=bitWidth, %rcx=size, %rdx=height
    # %rsi=width, %rdi=lastRow, $rbp=?, %r8=?,
    # %r9=?, %r10=?, %r11=?, %r12=?
    # %r13=?, %r14=?
    
    # 3. Calculate bitWidth*size
    rrmovq %rcx, %rbp
    mulq %rbx, %rbp
    # %rax=3, %rbx=bitWidth, %rcx=size, %rdx=height
    # %rsi=width, %rdi=lastRow, $rbp=bitWidth*size, %r8=?,
    # %r9=?, %r10=?, %r11=?, %r12=?
    # %r13=?, %r14=?

    # 5. Preprocess for loop
    # 1) create 3 * size
    rrmovq %rcx, %r10
    mulq %rax, %r10
    irmovq $1, %r8
    # %rax=3, %rbx=bitWidth, %rcx=size, %rdx=height
    # %rsi=width, %rdi=lastRow, $rbp=bitWidth*size, %r8=?,
    # %r9=?, %r10=3*size, %r11=?, %r12=?
    # %r13=?, %r14=?


    jmp BLUR_SQUARE
    BLUR_SQUARE_END:

    # CHECKED!
#    LOOP_H:
#        pushq %rdi
#        rrmovq %rsi, %r11
#        LOOP_W:
            # %rax=3, %rbx=bitWidth, %rcx=size, %rdx=(decreased)height
            # %rsi=width, %rdi=imgPtr, $rbp=bitWidth*size, %r8=1,
            # %r9=?, %r10=3*size, %r11=(decreased)width, %r12=?
            # %r13=?, %r14=?
            # stack: [rowPointer,
#            jmp BLUR_SQUARE
#            BLUR_SQUARE_END:
#            addq %r10, %rdi
#            subq %rcx, %r11
#            jg LOOP_W
#        popq %rdi
#        subq %rbp, %rdi
#        subq %rcx, %rdx
#        jg LOOP_H
ret

# %rax=3, %rbx=bitWidth, %rcx=size, %rdx=(decreased)height
# %rsi=width, %rdi=imgPtr, $rbp=bitWidth*size, %r8=1,
# %r9=?, %r10=3*size, %r11=(decreased)width, %r12=?
# %r13=?, %r14=?
# stack: [rowPointer,
BLUR_SQUARE:
    # Calculate new_width, new_height

    rrmovq %r11, %r12
    rrmovq %rcx, %r14
    subq %r11, %r14
    jl CHANGE_NEW_WIDTH
    CHANGE_NEW_WIDTH:
        rrmovq %rcx, %r12


    rrmovq %rdx, %r13
    rrmovq %rcx, %r14
    subq %r13, %r14
    jl CHANGE_NEW_HEIGHT
    CHANGE_NEW_HEIGHT:
        rrmovq %rcx, %r13

    # CHECKED!

    # %rax=3, %rbx=bitWidth, %rcx=size, %rdx=(decreased)height
    # %rsi=width, %rdi=imgPtr, $rbp=bitWidth*size, %r8=1,
    # %r9=?, %r10=3*size, %r11=(decreased)width, %r12=new_width
    # %r13=new_height, %r14=?
    # stack: [rowPointer,

    # Prepare for loop
    pushq %rcx
    pushq %rsi
    pushq %rbp
    pushq %r10
    pushq %r11
    pushq %r13
    irmovq $0 ,%rcx
    irmovq $0, %rsi
    irmovq $0, %rbp
    # %rax=3, %rbx=bitWidth, %rcx=sum0, %rdx=(decreased)height
    # %rsi=sum1, %rdi=imgPtr, $rbp=sum2, %r8=1,
    # %r9=?, %r10=?, %r11=?, %r12=new_width,
    # %r13=(decreasing)h_counter, %r14=(decreasing)w_counter
    # stack: [rowPointer, new_height, new_width, size, (decreased)height,
    #         width, bitWidth*size, 3*size, (decreased)width, new_height

    # Calculate sum
    SUM_H:
        rrmovq %r12, %r14
        pushq %rdi
        SUM_W:
            # move
            mrmovb (%rdi), %r9
            mrmovb 1(%rdi), %r10
            mrmovb 2(%rdi), %r11
            # add
            addq %r9, %rcx
            addq %r10, %rsi
            addq %r11, %rbp
            addq %rax, %rdi # add 3
            subq %r8, %r14
            jg SUM_W
        popq %rdi
        subq %rbx, %rdi
        subq %r8, %r13
        jg SUM_H
    # %rax=3, %rbx=bitWidth, %rcx=sum0, %rdx=(decreased)height
    # %rsi=sum1, %rdi=imgPtr, $rbp=sum2, %r8=1,
    # %r9=?, %r10=?, %r11=?, %r12=new_width,
    # %r13=?, %r14=0
    # stack: [rowPointer, new_height, new_width, size, (decreased)height,
    #         width, bitWidth*size, 3*size, (decreased)width, new_height
    popq %r13
    rrmovq %r13, %r9
    mulq %r12, %r9
    divq %r9, %rcx
    divq %r9, %rsi
    divq %r9, %rbp

    # %rax=3, %rbx=bitWidth, %rcx=mean0, %rdx=(decreased)height
    # %rsi=mean1, %rdi=imgPtr, $rbp=mean2, %r8=1,
    # %r9=?, %r10=?, %r11=?, %r12=new_width,
    # %r13=new_height, %r14=w_counter
    # stack: [rowPointer, new_height, new_width, size, (decreased)height,
    #         width, bitWidth*size, 3*size, (decreased)width
    ASSIGN_H:
        rrmovq %r12, %r14
        pushq %rdi
        ASSIGN_W:
            # move
            rmmovb %rcx, (%rdi)
            rmmovb %rsi, 1(%rdi)
            rmmovb %rbp, 2(%rdi)
            # add
            addq %rax, %rdi
            subq %r8, %r14
            jg ASSIGN_W
        popq %rdi
        addq %rbx, %rdi
        subq %r8, %r13
        jg ASSIGN_H
    subq %rbx, %rdi
    # %rax=3, %rbx=bitWidth, %rcx=mean0, %rdx=(decreased)height
    # %rsi=mean1, %rdi=imgPtr, $rbp=mean2, %r8=1,
    # %r9=?, %r10=?, %r11=?, %r12=new_width,
    # %r13=new_height, %r14=w_counter
    # stack: [rowPointer, new_height, new_width, size, (decreased)height,
    #         width, bitWidth*size, 3*size, (decreased)width
    popq %r11
    popq %r10
    popq %rbp
    popq %rsi
    popq %rcx
    # %rax=3, %rbx=bitWidth, %rcx=size, %rdx=(decreased)height
    # %rsi=width, %rdi=imgPtr, $rbp=bitWidth*size, %r8=1,
    # %r9=?, %r10=3*size, %r11=(decreased)width, %r12=?
    # %r13=?, %r14=?
    # stack: [rowPointer,
jmp BLUR_SQUARE_END
