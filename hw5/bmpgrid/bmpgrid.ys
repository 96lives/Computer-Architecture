#---------------------------------------------------------
# 
#  Project #4: Drawing grid lines in an image in Y86-64
#
#  May 15, 2018
#
#  Jin-Soo Kim (jinsoo.kim@snu.ac.kr)
#  Systems Software & Architecture Laboratory
#  Dept. of Computer Science and Engineering
#  Seoul National University
#
#---------------------------------------------------------


# bmp_grid() starts here
	.pos	0x400
	.align 8

bmp_grid:
	# imgptr is in %rdi
	# width  is in %rsi
	# height is in %rdx
	# gap	 is in %rcx
    # ----------------------------------------------------
	
	# Define constants 0, 1, 3, 255
	irmovq $255, %r14
	irmovq $3, %r13
	irmovq $1, %r12
	irmovq $0, %r11

	# compute bitWidth = 3 * width + pad	
	# rax = ?, rbx = ?, rcx = gap, rdx = height
	# rsp = stack, rbp = ?, rsi = width, rdi = imgptr, 
	# r8 = ?, r9 = ?, r10 = ?, 
	# r11 = 0, r12 = 1, r13 = 3, r14 = 255

	rrmovq %rsi, %rax
	rrmovq %rsi, %rbx
	andq %r13, %rbx
	mulq %r13, %rax
	addq %rbx, %rax

	#-----------------Draw Horizontal Lines---------------
	# rax = bitWidth, rbx = pad, rcx = gap, rdx = height
	# rsp = stack, rbp = ?, rsi = width, rdi = imgptr, 
	# r8 = ?, r9 = ?, r10 = ?, 
	# r11 = 0, r12 = 1, r13 = 3, r14 = 255

	rrmovq %rax, %rbp
	mulq %rcx, %rbp
 
	rrmovq %rax, %r8
	mulq %rdx, %r8
	subq %rax, %r8
	addq %rdi, %r8
	
	# rax = bitWidth, rbx = w Counter, rcx = gap, rdx = height
	# rsp = stack, rbp = gap * bitWidth, rsi = width, rdi = imgptr, 
	# r8 = imgEnd - bitWidth, r9 = hCounter, r10 = ?, 
	# r11 = 0, r12 = 1, r13 = 3, r14 = 255

	rrmovq %rsi, %rbx
	rrmovq %rdx, %r9
	mulq %r13, %rbx
	addq %rbx, %rbp
	rrmovq %rsi, %rbx

	# rax = bitWidth, rbx = w Counter, rcx = gap, rdx = height
	# rsp = stack, rbp = delta = gap * bitWidth + 3 * width, rsi = width, rdi = imgptr, 
	# r8 = imgEnd - bitWidth, r9 = hCounter, r10 = ?, 
	# r11 = 0, r12 = 1, r13 = 3, r14 = 255
	L1:
		rmmovb %r11, (%r8)
		rmmovb %r11, 1(%r8)
		rmmovb %r14, 2(%r8)
		addq %r13, %r8
		subq %r12, %rbx
		jg 	L1
		subq %rbp, %r8
		subq %rcx, %r9
		rrmovq %rsi, %rbx
		jg  L1
		
		
			
		
#	LoopHH:
#		# fix r8
#		irmovq $0, %rbx
#		rrmovq %r8, %r9
#		# rbx is width counter
#		LoopHW:
#			#rmmovb %r11, (%r9)
#			#rmmovb %r11, 1(%r9)
#			#rmmovb %r14, 2(%r9)
#			addq %r13, %r9
#			addq %r12, %rbx
#			rrmovq %rbx, %r10
#			subq %rsi, %r10
#			jne LoopHW
#		subq %rbp, %r8
#		rrmovq %r8, %rbx
#		subq %rdi, %rbx
#		jge LoopHH
	
	#-----------------Draw Vertical Lines---------------
	# rax = bitWidth, rbx = ?, rcx = gap, rdx = height
	# rsp = stack, rbp = gap * bitWidth, rsi = width, rdi = imgptr, 
	# r8 = ?, r9 = ?, r10 = ?, 
	# r11 = 0, r12 = 1, r13 = 3, r14 = 255

	rrmovq %rdi, %r8
	irmovq $0, %rbx 
	mulq %rcx, %r13
	
	
	# rax = bitWidth, rbx = hCounter, rcx = gap, rdx = height
	# rsp = stack, rbp = wCounter , rsi = width, rdi = imgptr, 
	# r8 = row address , r9 = actual address, r10 = ?, 
	# r11 = 0, r12 = 1, r13 = 3 * gap, r14 = 255
	
	LoopVH:
		irmovq $0, %rbp
		rrmovq %r8, %r9

		LoopVV:
			rmmovb %r11, (%r9)
			rmmovb %r11, 1(%r9)
			rmmovb %r14, 2(%r9)
			addq %r13, %r9
			addq %rcx, %rbp
			rrmovq %rbp, %r10
			subq %rsi, %r10
			jl LoopVV
		addq %rax, %r8
		addq %r12, %rbx
		rrmovq %rbx, %rbp
		subq %rdx, %rbp 
		jne LoopVH

	rrmovq %rdi, %rax

    # ----------------------------------------------------

	ret
